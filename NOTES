Example 1:

Two function for timers in JS. setInterval() and setTimeout()
setTimeout (funtion-to-run, amount-of-time)
setInterval (funtion-to-run, amount-of-time)

i.e
setTimeout(wakeUp,8 hours);
setInterval(eatMeal, 4 hours);

The setInterval function is assigned to a variable, this is called function expression
Function expression -> you can assign functions to variables
i.e var timer = setInterval( function(){ theDiv.innerHTML += content; }, 1500 );

The anonymous callback functions takes theDiv and adds content to it every 1500 miliseconds (1.5sec)
In the click handler, clearIntervak us used to stop the timer

<--------------------------------------------------------------------------------------------------------->

Example 2:

Using setTimeout to Trigger a Delayed Change
In this example:
A div starts with a class of one (small red square).
After 2 seconds (2000ms), the setTimeout function changes the class to two (large blue square).

Timeout Recap:
setTimeout() runs a function once after a set period of time.
i.e
Format-> setTimeout(function-to-run, delay-in-milliseconds);
![alt text](image-3.png)
Example from code -> setTimeout(function(){
theDiv.setAttribute("class", "two");
}, 2000);
![alt text](image-4.png)

After 2 seconds, the div switches from class="one" to class="two", triggering the CSS transition.

üé® Role of CSS Transitions

- Both .one and .two classes have:
  - Width
  - Height
  - Background color
  - transition: all 2s; (this makes the change animate smoothly over 2 seconds)
- Once setAttribute() changes the class, the transition kicks in automatically.
- This is a cool way to combine JavaScript and CSS for animations.

üîî Key Takeaways
‚úÖ Use setTimeout() for one-time events (delays).
‚úÖ CSS transitions handle the animation itself ‚Äî JavaScript just triggers the class change.
‚úÖ This keeps the JavaScript simple and offloads animation work to CSS, which is often smoother.

![alt text](image-2.png)

<--------------------------------------------------------------------------------------------------------->

Example 3:

üîÅ What is Recursion?
_ Recursion is when a function calls itself.
_ It allows repeating behavior without a setInterval or loop. \* In this example, classRotator() calls itself after a delay.

üîî What This Example Does
There‚Äôs a circular div that starts with class "one" (small red circle).
Every 2 seconds, the class switches between:
_ "one" (small red circle) and
_ "two" (large blue circle).
This swap happens forever ‚Äî all powered by recursion.

‚öôÔ∏è How It Works

- The classRotator() function checks the current class (currentClass).
- If it's "one", it:
  1. Uses setTimeout() to change the class to "two" after 2 seconds.
  2. Updates currentClass to "two".
  3. Calls classRotator() again to keep the cycle going.
- If it's "two", it:
  1. Uses setTimeout() to change the class back to "one" after 2 seconds.
  2. Updates currentClass to "one".
  3. Calls classRotator() again.
- This recursive "ping-pong" loop keeps switching the class every 2 seconds.

![alt text](image-1.png)

‚ú® Key Takeaways
‚úÖ Recursion + setTimeout() gives you more control than setInterval().
‚úÖ Great for animations or state changes that need flexible or varying timing.
‚úÖ Especially useful if you want to add different logic depending on state (like "one" vs "two").
